{"version":3,"sources":["Update.js","AllPost.js","PostForm.js","App.js","reducer/postReducer.js","index.js","ActionType/actionType.js"],"names":["Update","props","getTitleInput","React","createRef","getPostInput","dispatch","useDispatch","autoComplete","type","name","ref","rows","cols","onClick","e","preventDefault","UPDATE_POST","data","newTitle","current","value","newPost","id","Id","AllPost","post","useSelector","state","dispacth","className","map","item","edit","title","EDIT_POST","DELETE_POST","PostForm","titleInput","postInput","useEffect","focus","CREATE_POST","Date","App","console","log","length","require","initialState","postReducer","action","Post","filter","result","store","createStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b3cc5f9d.chunk.js","sourcesContent":["import React from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { UPDATE_POST } from './ActionType/actionType'\r\n\r\nfunction Update(props) {\r\n    \r\n    let getTitleInput=React.createRef()\r\n    let getPostInput=React.createRef()\r\n\r\n    const dispatch=useDispatch()\r\n\r\n\r\n\r\n\r\n    function handleUpdate(e){\r\n        e.preventDefault();\r\n        dispatch({\r\n\r\n            type:UPDATE_POST,\r\n            data:{\r\n\r\n                newTitle:getTitleInput.current.value,\r\n                newPost:getPostInput.current.value,\r\n               \r\n            },\r\n            id:props.Id\r\n            \r\n        })\r\n\r\n    }\r\n\r\n    return (\r\n        <div>\r\n              <form autoComplete='off'>\r\n                <input type='text' name='title' ref={getTitleInput}/><br/><br/>\r\n                <textarea rows='3' cols='18' ref={getPostInput}/><br/><br/>\r\n                <button type=\"submit\" onClick={handleUpdate}>Update</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Update\r\n","import React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { DELETE_POST, EDIT_POST } from './ActionType/actionType'\r\nimport './AllPost.css'\r\nimport Update from './Update'\r\nfunction AllPost() {\r\n\r\n    const post = useSelector(state => state.post)\r\n    const dispacth=useDispatch()\r\n    function Delete(Id){\r\n       \r\n        dispacth({\r\n\r\n            type:DELETE_POST,\r\n            id:Id\r\n\r\n        })\r\n     }\r\n\r\n\r\n    function Edit(Id){\r\n        dispacth({\r\n            type:EDIT_POST,\r\n            id:Id\r\n        })\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n\r\n        <div className='post'>\r\n\r\n          \r\n            \r\n            <h1>All Post</h1>\r\n          \r\n          {post.map(item=>{\r\n    \r\n    return  <div className='post__container'>\r\n                  \r\n              {item.edit?<Update Id={item.id}/>:<div className='myPost'>\r\n              <h1>{item.title}</h1>\r\n          <p>{item.post}</p>\r\n       \r\n          <button onClick={()=>Edit(item.id)}>Edit</button>\r\n          <button onClick={()=>Delete(item.id)}>Delete</button>\r\n          </div>}\r\n          </div>\r\n          })}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AllPost\r\n","import React, { useEffect } from 'react'\r\nimport {useDispatch} from 'react-redux'\r\nimport { CREATE_POST } from './ActionType/actionType'\r\nimport './PostForm.css'\r\nfunction PostForm() {\r\n\r\n    let titleInput=React.createRef()\r\n    let postInput=React.createRef()\r\n\r\n     const dispatch = useDispatch()\r\n\r\n     useEffect(()=>{\r\n     \r\n         return  titleInput.current.focus();\r\n    \r\n     },[])\r\n\r\n    function handleSubmit(e){\r\n        e.preventDefault();\r\n\r\n        dispatch({\r\n            type:CREATE_POST,\r\n            data:{\r\n                title:titleInput.current.value,\r\n                post:postInput.current.value,\r\n                id:new Date(),\r\n                edit:false\r\n            }\r\n\r\n        })\r\n        titleInput.current.value=null\r\n        postInput.current.value=null\r\n\r\n       \r\n    }\r\n    return (\r\n        <div className='form__container'>\r\n            \r\n            <form autoComplete='off'>\r\n                <input type='text' name='title' ref={titleInput}/><br/><br/>\r\n                <textarea rows='3' cols='18' ref={postInput}/><br/><br/>\r\n                <button type=\"submit\" onClick={handleSubmit}>Post</button>\r\n            </form>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PostForm\r\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport AllPost from './AllPost';\nimport './App.css';\nimport PostForm from './PostForm';\n\nfunction App() {\n\n  const post = useSelector(state => state.post)\n  return (\n    <div className=\"App\">\n     <PostForm/>\n     {console.log(post)}\n     \n     {post.length>0?<AllPost/>:null}\n    </div>\n  );\n}\n\nexport default App;\n","const { CREATE_POST, DELETE_POST, EDIT_POST, UPDATE_POST } = require(\"../ActionType/actionType\")\r\n\r\nconst initialState={\r\n\r\n    post:[]\r\n}\r\n\r\n\r\nconst postReducer=(state=initialState,action)=>{\r\n\r\n\r\n    if(action.type===CREATE_POST){\r\n      \r\n        return({\r\n            ...state,\r\n            post:[action.data,...state.post]\r\n        })\r\n    }else if(action.type===DELETE_POST){\r\n       let Post=state.post.filter((post)=>post.id!==action.id)\r\n        return({\r\n            ...state,\r\n            post:Post\r\n        })\r\n    }else if(action.type===EDIT_POST){\r\n          let Post=state.post.map((post)=>post.id===action.id?{...post,edit:!post.edit}:post)\r\n\r\n          return({\r\n              ...state,\r\n              post:Post\r\n          })\r\n    }else if( action.type===UPDATE_POST){\r\n        const result= state.post.map((post)=>{\r\n            if(post.id === action.id) {\r\n              return {\r\n                 ...post,\r\n                 title:action.data.newTitle,\r\n                 post:action.data.newPost,\r\n                 edit: !post.edit\r\n              }\r\n            } else return post;\r\n          })\r\n\r\n          return({\r\n              ...state,\r\n              post:result\r\n          })\r\n    }\r\n\r\n    return({\r\n \r\n        ...state\r\n    }) \r\n}\r\n\r\n\r\nexport default postReducer","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {Provider} from 'react-redux'\nimport {createStore} from 'redux'\nimport postReducer from './reducer/postReducer'\n\nconst store=createStore(postReducer)\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n    <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n","export const CREATE_POST='CREATE_POST'\r\nexport const DELETE_POST='DELETE_POST'\r\nexport const EDIT_POST=\"EDIT_POST\"\r\nexport const UPDATE_POST=\"UPDATE_POST\""],"sourceRoot":""}